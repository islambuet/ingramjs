<%- include('header', {currentMenu: 'statistics', pageTitle: 'Sorted Codes'}); %>
    <div class="row m-0 mt-2">
        <div class="col-lg-12 pt-0 pb-0 pl-2 pr-2">
            <div class="row m-0">
                <div class="col-lg-12">
                    <div class="row">
                        <div class="col-lg-12" id="top-chart" style="height: 270px;">SC01 Chart</div>
                    </div>
                    <div class="row mt-2">
                        <div class="col-lg-12" id="othersc-chart" style="height: 270px;">Others Chart</div>
                    </div>
                </div>
            </div>
            
        </div>
    </div>
</div>
<%- include('footer', {currentMenu: 'statistics-graphs'}); %>
<script src="js/jquery-bootstrap.js"></script>
<script src="js/nav.js"></script>

<script>
const Highcharts = require('highcharts/highstock')
require('highcharts/modules/exporting')(Highcharts);
require('highcharts/modules/export-data')(Highcharts);

let machine_mode = 9;

jQuery(document).ready(function() {
    
    jQuery("#ip_list_dropdown").change(function() {
        selected_machine = jQuery(this).val();

        if(selected_machine !== "") {
            let selected_machine_name = machine_list[selected_machine];
            jQuery("#display_machine_name").text(selected_machine_name);

            setInterval(() => {
                ipcRenderer.send("get:views", selected_machine, "sorted_graphs");
            }, 60000); //have to change it to 5 minutes

        } else {
            jQuery("#display_machine_name").text("Select a machine");
            selected_machine = 0;
        }

        ipcRenderer.send("get:views", selected_machine, "sorted_graphs");
    });
});


let top_chart = Highcharts.chart('top-chart', {
        chart: {
            type: 'spline',
            marginRight: 10,
            borderColor: '#D3D3D3',
            borderWidth: 1
        },

        time: {
            useUTC: false
        },

        title: {
            text: 'SC01'
        },

        xAxis: {
            type: 'datetime',
            tickInterval: 1000*60*60
        },

        yAxis: {
            title: {
                text: null
            },
            tickInterval: 5,
            tickWidth: 1,
            tickLength: 5,
            min: 0,
            max: 100,
            lineColor: '#C0C0C0',
            lineWidth: 1,
            plotLines: [{
                value: 0,
                width: 1,
                color: '#808080'
            }]
        },

        tooltip: {
            headerFormat: '<b>{series.name}</b><br/>',
            pointFormat: '{point.x:%Y-%m-%d %H:%M}<br/>{point.y:.2f}%'
        },

        legend: {
            enabled: true
        },

        exporting: {
            enabled: true,
            buttons: {
                contextButton: {
                    menuItems: ['downloadCSV', 'separator', 'downloadPDF', 'downloadPNG']
                }
            }
        },

        credits: {
            enabled: false
        },

        series: [{
            name: 'SC01',
            marker: {
                enabled: false
            },
            data: []
        }]
    });

    let others_chart = Highcharts.chart('othersc-chart', {
        chart: {
            type: 'spline',
            marginRight: 10,        
            borderColor: '#D3D3D3',
            borderWidth: 1
        },

        time: {
            useUTC: false
        },

        title: {
            text: 'Others'
        },

        xAxis: {
            type: 'datetime',
            tickInterval: 1000*60*60
        },

        yAxis: {
            title: {
                text: null
            },
            labels: {
                format: '{value}'
            },
            tickInterval: 5,
            tickWidth: 1,
            tickLength: 5,
            min: 0,
            max: 100,
            lineColor: '#C0C0C0',
            lineWidth: 1,
            plotLines: [{
                value: 0,
                width: 1,
                color: '#808080'
            }]
        },

        tooltip: {
            headerFormat: '<b>{series.name}</b><br/>',
            pointFormat: '{point.x:%Y-%m-%d %H:%M:%S}<br/>{point.y:.2f}%'
        },

        legend: {
            enabled: true
        },

        exporting: {
            enabled: true,
            buttons: {
                contextButton: {
                    menuItems: ['downloadCSV', 'separator', 'downloadPDF', 'downloadPNG']
                }
            }
        },

        credits: {
            enabled: false
        },
        turboThreshold: 0,
        series: []
    });


let sorting_codes = {        
    "1":"SC01",
    "2":"SC02", 
    "3":"SC03", 
    "4":"SC04", 
    "5":"SC05", 
};

let other_charts_index = {
    "SC01" : "0",
    "SC02" : "1", 
    "SC03" : "2", 
    "SC04" : "3", 
    "SC05" : "4", 
}

ipcRenderer.on("render:sorted_graphs", function(e, data_result) {
    machine_mode = data_result['mode'];
    changeMachineNameBg(machine_mode);
    //console.log("Mode: ", machine_mode);
    //console.log(data_result);
    let sc_result = data_result['sc'];
    //console.log(sc_result);

    let other_sorting_codes_series = [];
    for (let k in sorting_codes) {
        if(k !== "1") { //Change here based on top chart
            other_sorting_codes_series[k] = {"name" : sorting_codes[k], "data" : []};
        }
    }

    let top_chart_data = [], others_chart_data = [];
    for (let k in sc_result) {

        let time_stamp = Number(sc_result[k]['time_stamp']);
        for (let s in sc_result[k]) {
            if(s !== "time_slot" && s !== "time_stamp")
            {
                let percentage = Number(sc_result[k][s])
                if(s == 1) { //Change here based on top chart
                    top_chart_data.push({
                        x: time_stamp,
                        y: percentage
                    });
                } else {
                    other_sorting_codes_series[s]['data'].push({
                        x: time_stamp,
                        y: percentage
                    });
                }
            }
        }
    }

    top_chart.series[0].setData(top_chart_data, true);
    
    //console.log(other_sorting_codes_series);

    for(let k in other_sorting_codes_series) {
        if(other_sorting_codes_series[k]) {
            others_chart_data.push({
                name: other_sorting_codes_series[k]['name'],
                marker: {
                    enabled: false
                },
                data: other_sorting_codes_series[k]['data']
            });
        }
    }

    others_chart.update({
            series: others_chart_data
        }, 
        true, 
        true
    );

    /* if(Highcharts.charts.length > 0) {
        let num_of_charts = Highcharts.charts.length;
        for (let hc=0; hc < num_of_charts; hc++) {
            Highcharts.charts[hc] && Highcharts.charts[hc].destroy();
        }
        Highcharts.charts.splice(0, num_of_charts);
    } */
});
</script>
</body>
</html>